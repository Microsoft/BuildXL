// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

// import "tools/google/protobuf/timestamp.proto";

package BuildXL.Execution.Analyzer;

option csharp_namespace = "BuildXL.Execution.Analyzer";

/////////////////////////////////////////////////////
////     Generic Event Info (key, count, etc)    ////
/////////////////////////////////////////////////////

// Message that keeps track of total number of events processed
message EventCount_XLGpp{
    uint32 Value = 1;
}

// Event query should be of this format. It also serves as the key to the DB
message EventTypeQuery_XLGpp{
    
    // ID of the Event - required
    ExecutionEventId_XLGpp EventTypeID = 1; 
    
    // Other ideas to keep in EventTypeQuery_XLGpp were as follows:
    // string (or int64) Path (or hash of path) = 2;
    // string RewriteContent = 3;
    // int32 WorkerID = 4;
    
    // UUID to make the key unique. TODO: remove once a minimal key is formulated and decided upon
    string UUID = 99;   
}

/////////////////////////////////////////////////////
////        Enums and Helper Structs             ////
/////////////////////////////////////////////////////

enum ExecutionEventId_XLGpp{
        FileArtifactContentDecided = 0;
        WorkerList = 1;
        PipExecutionPerformance = 2;
        DirectoryMembershipHashed = 3;
        ObservedInputs = 4;
        ProcessExecutionMonitoringReported = 5;
        ExtraEventDataReported = 6;
        DependencyViolationReported = 7;
        PipExecutionStepPerformanceReported = 8;
        ResourceUsageReported = 9;
        ProcessFingerprintComputation = 10;
        PipCacheMiss = 11;
        PipExecutionDirectoryOutputs = 12;
        DominoInvocation = 13;
}

message FileArtifact_XLGpp{

}

message FileContentInfo_XLGpp{
    
}

/////////////////////////////////////////////////////
////                Event Data                   ////
/////////////////////////////////////////////////////

message FileArtifactContentDecidedEvent_XLGpp{
    string UUID = 99;

    FileArtifact_XLGpp FileArtifact = 1;

    FileContentInfo_XLGpp FileContentInfo = 2;

    int32 OutputOrigin = 3;
}

message PipExecutionPerformanceEvent_XLGpp{

    string UUID = 99;

    uint32 PipID = 1;

    int32 PipExecutionLevel = 2;

    //google.protobuf.Timestamp ExecutionStart = 3;
    
    //google.protobuf.Timestamp ExecutionStop = 4;

    message ProcessPipExecutionPerformance{
        // Duration ProcessExecutionTime = 1;
        
        // IOCounter IO = 2;
        
        // Duration UserTime = 3;

        // DUration KernelTime = 4;

        uint64 PeakMemoryUsage = 5;

        int32 PeakMemoryUsageMb = 6;

        uint32 NumberOfProcesses = 7;

        // FileMonitoringViolationCounters = 8;

        // Fingerprint Fingerprint = 9;

        uint64 CacheDescriptorId = 10;
    }
    
    uint32 WorkerID = 3;

    ProcessPipExecutionPerformance _ProcessPipExecutionPerformance = 4;
}

message ExtraEvent_XLGpp{
    string UUID = 99;

    bool DisableDetours = 1;
    bool IgnoreReparsePoints = 2;
    bool IgnorePreloadedDlls = 3;
    bool ExistingDirectoryProbesAsEnumerations = 4;
    bool NtFileCreateMonitored = 5;
    bool ZwFileCreateOpenMonitored = 6;
    bool IgnoreZwRenameFileInformation = 7;
    bool IgnoreZwOtherFileInformation = 8;
    bool IgnoreNonCreateFileReparsePoints = 9;
    bool IgnoreSetFileInformationByHandle = 10;
    bool IgnoreGetFinalPathNameByHandle = 11;

    int32 FingerprintVersion = 12;
    string FingerprintSalt = 13;

    //??

    bool UnexpectedFileAccessesAreErrors = 15;
    bool MonitorFileAccesses = 16;
    bool MaskUntrackedAccesses = 17;
    bool NormalizeReadTimestamps = 18;
    bool PipWarningsPromotedToErrors = 19;
    bool ValidateDistribution = 20;
    string RequiredKextVersionNumber = 21;

}

// The BXL Invocation Event message
message BXLInvocationEvent_XLGpp{

    // Unique identifier for the event - required, TODO: Remove as it may not be needed.
    string UUID = 99;

    // Identifies the worker which invoked this event
    uint32 WorkerID = 1;

    // Identifies the source that called this event
    string SubstSource = 2;
    
    // Identifies the target of this event
    string SubstTarget = 3;

    // Whether the source is valid
    bool IsSubstSourceValid = 4;
    
    // Whether the target is valid
    bool IsSubstTargetValid = 5; 
}