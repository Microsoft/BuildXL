// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "tools/google/protobuf/timestamp.proto";
import "tools/google/protobuf/duration.proto";

package BuildXL.Xldb.Proto;

option csharp_namespace = "BuildXL.Xldb.Proto";

//
// Enums
//

// Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type,
// not children of it. Therefore, enum values must be unique within "BuildXL.Execution.Analyzer", not
// just within a particular enum. If there are conflicting enum values, append the name of the enum in front.
// ie: ChooseWorkerCpu ---> PipExecutionStep_ChooseWorkerCpu

// Also note that to avoid protobuf's design to not serialize enum values that are equal to 0, we add "0" as an invalid value for each enum.

enum ExecutionEventId{
    ExecutionEventId_Uninitialized = 0;

    FileArtifactContentDecided = 1;
    WorkerList = 2;
    ExecutionEventId_PipExecutionPerformance = 3;
    DirectoryMembershipHashed = 4;

    // Deprecated in favor of ProcessFingerprintComputation (enum 11)
    // ObservedInputs = 5;

    ProcessExecutionMonitoringReported = 6;
    ExecutionEventId_ExtraEventDataReported = 7;
    DependencyViolationReported = 8;
    PipExecutionStepPerformanceReported = 9;
    ResourceUsageReported = 10;
    ProcessFingerprintComputation = 11;
    PipCacheMiss = 12;
    PipExecutionDirectoryOutputs = 13;
    BxlInvocation = 14;
}

enum PipOutputOrigin{
    PipOutputOrigin_Uninitialized = 0;

    Produced = 1;
    UpToDate = 2;
    DeployedFromCache = 3;
    NotMaterialized = 4;
}

enum PipExecutionStep{
    PipExecutionStep_Uninitialized = 0;
    
    PipExecutionStep_None = 1;
    Start = 2;
    Cancel = 3;
    SkipDueToFailedDependencies = 4;
    CheckIncrementalSkip = 5;
    MaterializeInputs = 6;
    MaterializeOutputs = 7;
    ExecuteNonProcessPip = 8;
    PipExecutionStep_CacheLookup = 9;
    RunFromCache = 10;
    ExecuteProcess = 11;
    PostProcess = 12;
    HandleResult = 13;
    PipExecutionStep_ChooseWorkerCpu = 14;
    PipExecutionStep_ChooseWorkerCacheLookup = 15;
    Done = 16;
}

enum WorkDispatcher_DispatcherKind{
    WorkDispatcher_DispatcherKind_Uninitialized = 0;

    WorkDispatcherKind_None = 1;
    IO = 2;
    WorkDispatcher_DispatcherKind_CPU = 3;
    Light = 4;
    WorkDispatcher_DispatcherKind_CacheLookup = 5;
    WorkDispatcher_DispatcherKind_ChooseWorkerCpu = 6;
    WorkDispatcher_DispatcherKind_ChooseWorkerCacheLookup = 7;
    Materialize = 8;
}

enum FileMonitoringViolationAnalyzer_DependencyViolationType{
    FileMonitoringViolationAnalyzer_DependencyViolationType_Uninitialized = 0;

    DoubleWrite = 1;
    ReadRace = 2;
    UndeclaredOrderedRead = 3;
    MissingSourceDependency = 4;
    UndeclaredReadCycle = 5;
    UndeclaredOutput = 6;
    ReadUndeclaredOutput = 7;
    WriteInSourceSealDirectory = 8;
    WriteInUndeclaredSourceRead = 9;
    WriteInExistingFile = 10;
    WriteOnAbsentPathProbe = 11;
    AbsentPathProbeUnderUndeclaredOpaque = 12;
    WriteToTempPathInsideSharedOpaque = 13;
}

enum FileMonitoringViolationAnalyzer_AccessLevel{
    FileMonitoringViolationAnalyzer_AccessLevel_Uninitialized = 0;

    FileMonitoringViolationAnalyzer_AccessLevel_Read = 1;
    FileMonitoringViolationAnalyzer_AccessLevel_Write = 2;
}

enum PipCacheMissType{
    PipCacheMissType_Uninitialized = 0;

    Hit = 51;
    MissForDescriptorsDueToStrongFingerprints = 53;
    MissForDescriptorsDueToWeakFingerprints = 54;
    MissForDescriptorsDueToArtificialMissOptions = 55;
    MissForCacheEntry = 56;
    MissDueToInvalidDescriptors = 57;
    MissForProcessMetadata = 58;
    MissForProcessMetadataFromHistoricMetadata = 59;
    MissForProcessOutputContent = 60;
    MissForProcessConfiguredUncacheable = 61;
}

enum ExecutionSampler_LimitingResource{
    ExecutionSampler_LimitingResource_Uninitialized = 0;

    GraphShape = 1;
    ExecutionSampler_LimitingResource_CPU = 2;
    Disk = 3;
    Memory = 4;
    ConcurrencyLimit = 5;
    ProjectedMemory = 6;
    Semaphore = 7;
    Other = 8;
}

enum CreationDisposition{
    CreationDisposition_Uninitialized = 0;

    CREATE_NEW = 1;
    CREATE_ALWAYS = 2;
    OPEN_EXISTING = 3;
    OPEN_ALWAYS = 4;
    TRUNCATE_EXISTING = 5;
}

enum DesiredAccess{
    DesiredAccess_Uninitialized = 0;

    DELETE = 0x00010000;
    SYNCHRONIZE = 0x00100000;
    FILE_APPEND_DATA = 0x00000004;
    FILE_WRITE_EA = 0x00000010;
    FILE_WRITE_ATTRIBUTES = 0x00000100;
    FILE_WRITE_DATA = 0x00000002;
    GENERIC_ALL = 0x10000000;
    GENERIC_EXECUTE = 0x20000000;
    GENERIC_WRITE = 0x40000000;
    GENERIC_READ = -2147483648;
}

enum FlagsAndAttributes{
    FlagsAndAttributes_Uninitialized = 0;

    FILE_ATTRIBUTE_READONLY = 0x00000001;
    FILE_ATTRIBUTE_HIDDEN = 0x00000002;
    FILE_ATTRIBUTE_SYSTEM = 0x00000004;
    FILE_ATTRIBUTE_ARCHIVE = 0x00000020;
    FILE_ATTRIBUTE_NORMAL = 0x00000080;
    FILE_ATTRIBUTE_TEMPORARY = 0x00000100;
    FILE_ATTRIBUTE_OFFLINE = 0x00001000;
    FILE_ATTRIBUTE_ENCRYPED = 0x00004000;
    FILE_FLAG_OPEN_NO_RECALL = 0x00100000;
    FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
    FILE_FLAG_SESSION_AWARE = 0x00800000;
    FILE_FLAG_POSIX_SEMANTICS = 0x01000000;
    FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;
    FILE_FLAG_DELETE_ON_CLOSE = 0x04000000;
    FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000;
    FILE_FLAG_RANDOM_ACCESS = 0x10000000;
    FILE_FLAG_NO_BUFFERING = 0x20000000;
    FILE_FLAG_OVERLAPPED = 0x40000000;
    FILE_FLAG_WRITE_THROUGH = -2147483648;
}

enum ShareMode{
    ShareMode_Uninitialized = 0;

    FILE_SHARE_NONE = 0x1;
    FILE_SHARE_READ = 0x2;
    FILE_SHARE_WRITE = 0x4;
    FILE_SHARE_DELETE = 0x8;
}

enum FileAccessStatus{
    FileAccessStatus_Uninitialized = 0;

    FileAccessStatus_None = 1;
    Allowed = 2;
    Denied = 3;
    CannotDetermineByPolicy = 4;
}

enum FileAccessStatusMethod{
    FileAccessStatusMethod_Uninitialized = 0;

    PolicyBased = 1;
    FileExistenceBased = 2;
}

enum RequestedAccess{
    RequestedAccess_Uninitialized = 0;

    RequestedAccess_None = 1;
    RequestedAccess_Read = 2;
    RequestedAccess_Write = 4;
    Probe = 8;
    Enumerate = 16;
    EnumerationProbe = 32;
    // Read | Write => 2 | 4 = 6
    ReadWrite = 6;
    // Read | Write | Probe | Enumerate | EnumerationProbe =>  2 | 4 | 8 | 16 | 31 = 62
    All = 62;
}

enum ReportedFileOperation{
    ReportedFileOperation_Uninitialized = 0;
    Unknown = 1;
    CreateFile = 2;
    GetFileAttributes = 3;
    GetFileAttributesEx = 4;
    ReportedFileOperation_Process = 5;
    FindFirstFileEx = 6;
    FindNextFile = 7;
    CreateDirectory = 8;
    DeleteFile = 9;
    MoveFileSource = 10;
    MoveFileDestination = 11;
    SetFileInformationByHandleSource = 12;
    SetFileInformationByHandleDest = 13;
    ZwSetRenameInformationFileSource = 14;
    ZwSetRenameInformationFileDest = 15;
    ZwSetLinkInformationFile = 16;
    ZwSetDispositionInformationFile = 17;
    ZwSetModeInformationFile = 18;
    ZwSetFileNameInformationFileSource = 19;
    ZwSetFileNameInformationFileDest = 20;
    CopyFileSource = 21;
    CopyFileDestination = 22;
    CreateHardLinkSource = 23;
    CreateHardLinkDestination = 24;
    RemoveDirectory = 25;
    NtQueryDirectoryFile = 26;
    ZwQueryDirectoryFile = 27;
    NtCreateFile = 28;
    ZwCreateFile = 29;
    ZwOpenFile = 30;
    ChangedReadWriteToReadAccess = 31;
    FirstAllowWriteCheckInProcess = 32;
    ReparsePointTarget = 33;
    CreateSymbolicLinkSource = 34;
    MoveFileWithProgressSource = 35;
    MoveFileWithProgressDest = 36;
    MultipleOperations = 37;
    ProcessExit = 38;
    MacLookup = 39;
    MacReadlink = 40;
    MacVNodeCreate = 41;
    KAuthMoveSource = 42;
    KAuthMoveDest = 43;
    KAuthCreateHardlinkSource = 44;
    KAuthCreateHardlinkDest = 45;
    KAuthCopySource = 46;
    KAuthCopyDest = 47;
    KAuthDeleteDir = 48;
    KAuthDeleteFile = 49;
    KAuthOpenDir = 50;
    KAuthReadFile = 51;
    KAuthCreateDir = 52;
    KAuthWriteFile = 53;
    KAuthClose = 54;
    KAuthCloseModified = 55;
    KAuthGetAttributes = 56;
    KAuthVNodeExecute = 57;
    KAuthVNodeWrite = 58;
    KAuthVNodeRead = 59;
    KAuthVNodeProb = 60;
}

enum FingerprintComputationKind{
    FingerprintComputationKind_Uninitialized = 0;

    Execution = 1;
    CacheCheck = 2;
}

enum ObservedInputType{
    ObservedInputType_Uninitialized = 0;

    AbsentPathProbe = 1;
    FileContentRead = 2;
    DirectoryEnumeration = 3;
    ExistingDirectoryProbe = 4;
    ExistingFileProbe = 5;
}

enum PreserveOutputsMode{
    PreserveOutputsMode_Uninitialized = 0;

    Disabled = 1;
    Enabled = 2;
    Reset = 3;
}

enum SandboxKind{
    SandboxKind_Uninitialized = 0;

    SandboxKind_None = 1;
    Default = 2;
    WinDetours = 3;
    MaxOsKext = 4;
    MacOsKextIgnoreFileAccesses = 5;
    MacOsEndpointSecurity = 6;
}

enum DoubleWritePolicy{
    DoubleWritePolicy_Uninitialized = 0;

    DoubleWritesAreErrors = 1;
    AllowSameContentDoubleWrites = 2;
    UnsafeFirstDoubleWriteWins = 3;
}

enum PipType{
    PipType_Uninitialized = 0;

    PipType_WriteFile = 1;
    PipType_CopyFile = 2;
    PipType_Process = 3;
    PipType_Ipc = 4;
    PipType_Value = 5;
    PipType_SpecFile = 6;
    PipType_Module = 7;
    PipType_HashSourceFile = 8;
    PipType_SealDirectory = 9;
}

enum Options{
    Options_Uninitialized = 0;

    None = 1;
    HasUntrackedChildProcesses = 2;
    ProducesPathIndependentOutputs = 4;
    OutputsMustRemainWritable = 8;
    AllowPreserveOutputs = 16;
    IsLight = 32;
    NeedsToRunInContainer = 64;
    AllowUndeclaredSourceReads = 128;
    DisableCacheLookup = 256;
    DependsOnCurrentOs = 512;
    DependsOnWindowsAppData = 1024;
    DependsOnWindowsProgramData = 2048;
    RequiresAdmin = 4096;
    HasPreserveOutputWhitelist = 8192;
    IncrementalTool = 16384;
}

enum FileExistence{
    FileExistence_Uninitialized = 0;

    Required = 1;
    Temporary = 2;
    Optional = 3;
}

enum WriteFileEncoding{
    WriteFileEncoding_Uninitialized = 0;

    Utf8 = 1;
    Ascii = 2;
}

enum SealDirectoryKind{
    SealDirectoryKind_Uninitialized = 0;

    Full = 1;
    Partial = 2;
    SourceAllDirectories = 3;
    SourceTopDirectoryOnly = 4;
    Opaque = 5;
    SharedOpaque = 6;
}

enum ServicePipKind{
    ServicePipKind_Uninitialized = 0;
    ServicePipKind_None = 1;
    Service = 2;
    ServiceClient = 3;
    ServiceShutdown = 4;
    ServiceFinalization = 5;
}

//
// Helper Structs
//

message AbsolutePath{
    string Value = 1;
}

message ContentHash{
    string Value = 1;
}

message FileArtifact{
    AbsolutePath path = 1;

    int32 RewriteCount = 2;
}

message FileContentInfo{
    // [IsKnownExistenceFlag | Existence | IsKnownLengthFlag | Length];
    int64 LengthAndExistence = 1;

    ContentHash Hash = 2;
}

message PipExecutionPerformance{
    int32 PipExecutionLevel = 1;

    google.protobuf.Timestamp ExecutionStart = 2;

    google.protobuf.Timestamp ExecutionStop = 3;
}

message ProcessPipExecutionPerformance{
    google.protobuf.Duration ProcessExecutionTime = 1;

    IOTypeCounters ReadCounters = 2;

    IOTypeCounters WriteCounters = 3;

    IOTypeCounters OtherCounters = 4;

    google.protobuf.Duration UserTime = 5;

    google.protobuf.Duration KernelTime = 6;

    uint64 PeakMemoryUsage = 7;

    int32 PeakMemoryUsageMb = 8;

    uint32 NumberOfProcesses = 9;

    FileMonitoringViolationCounters FileMonitoringViolationCounters = 10;

    Fingerprint Fingerprint = 11;

    uint64 CacheDescriptorId = 12;
}

message FileMonitoringViolationCounters{
    int32 NumFileAccessesWhitelistedButNotCacheable = 1;

    int32 NumFileAccessesWhitelistedAndCacheable = 2;

    int32 NumFileAccessViolationsNotWhitelisted = 3;
}

message Fingerprint{
    int32 Length = 1;

    bytes Bytes = 2;
}

message IOTypeCounters{
    uint64 OperationCount = 1;

    uint64 TransferCOunt = 2;
}

message ReportedProcess{
    string Path = 1;

    uint32 ProcessId = 2;

    string ProcessArgs = 3;

    IOTypeCounters ReadCounters = 4;

    IOTypeCounters WriteCounters = 5;

    IOTypeCounters OtherCounters = 6;

    google.protobuf.Timestamp CreationTime = 7;

    google.protobuf.Timestamp ExitTime = 8;

    google.protobuf.Duration KernelTime = 9;

    google.protobuf.Duration UserTime = 10;

    uint32 ExitCode = 11;

    uint32 ParentProcessId = 12;
}

message ReportedFileAccess{
    CreationDisposition CreationDisposition = 1;

    DesiredAccess DesiredAccess = 2;

    uint32 Error = 3;

    uint64 Usn = 4;

    FlagsAndAttributes FlagsAndAttributes = 5;

    string Path = 6;

    string ManifestPath = 7;

    ReportedProcess Process = 8;

    ShareMode ShareMode = 9;

    FileAccessStatus Status = 10;

    FileAccessStatusMethod Method = 11;

    RequestedAccess RequestedAccess = 12;

    ReportedFileOperation Operation = 13;

    bool ExplicitlyReported = 14;

    string EnumeratePattern = 15;
}

message ProcessDetouringStatusData{
    uint64 ProcessID = 1;

    uint32 ReportStatus = 2;

    string ProcessName = 3;

    string StartApplicationName = 4;

    string StartCommandLine = 5;

    bool NeedsInjection = 6;

    uint64 Job = 7;

    bool DisableDetours = 8;

    uint32 CreationFlags = 9;

    bool Detoured = 10;

    uint32 Error = 11;
}

message WeakContentFingerPrint{
    Fingerprint Hash = 1;
}

message StrongContentFingerPrint{
    Fingerprint Hash = 1;
}

message ObservedPathEntry{
    AbsolutePath Path = 1;

    string EnumeratePatternRegex = 2;
}

message UnsafeSandboxConfiguration{
    PreserveOutputsMode PreserveOutputs = 1;

    bool MonitorFileAccesses = 2;

    bool IgnoreZwRenameFileInformation = 3;

    bool IgnoreZwOtherFileInformation = 4;

    bool IgnoreNonCreateFileReparsePoints = 5;

    bool IgnoreSetFileInformationByHandle = 6;

    bool IgnoreReparsePoints = 7;

    bool IgnorePreloadedDlls = 8;

    bool ExistingDirectoryProbesAsEnumerations = 9;

    bool MonitorNtCreateFile = 10;

    bool MonitorZwCreateOpenQueryFile = 11;

    SandboxKind SandboxKind = 12;

    bool UnexpectedFileAccessesAreErrors = 13;

    bool IgnoreGetFinalPathNameByHandle = 14;

    bool IgnoreDynamicWritesOnAbsentProbes = 15;

    DoubleWritePolicy DoubleWritePolicy = 16;

    bool IgnoreUndeclaredAccessesUnderSharedOpaques = 17;
}

message UnsafeOptions{
    ContentHash PreserveOutputsSalt = 1;

    UnsafeSandboxConfiguration UnsafeConfiguration = 2;
}

message ObservedInput{
    ObservedInputType Type = 1;

    ContentHash Hash = 2;

    ObservedPathEntry PathEntry = 3;

    AbsolutePath Path = 4;

    bool IsSearchPath = 5;

    bool IsDirectoryPath = 6;

    bool DirectoryEnumeration = 7;
}

message ObservedPathSet{
    repeated ObservedPathEntry Paths = 1;

    repeated string ObservedAccessedFileNames = 2;

    UnsafeOptions UnsafeOptions = 3;
}

message ProcessStrongFingerprintComputationData{
    ObservedPathSet PathSet = 1;

    ContentHash PathSetHash = 2;

    repeated ObservedPathEntry PathEntries = 3;

    UnsafeOptions UnsafeOptions = 4;

    repeated string ObservedAccessedFileNames = 5;

    repeated StrongContentFingerPrint PriorStrongFingerprints = 6;

    bool Succeeded = 7;

    bool IsStrongFingerprintHit = 8;

    StrongContentFingerPrint ComputedStrongFingerprint = 9;

    repeated ObservedInput ObservedInputs = 10;
}

message DirectoryFingerprint{
    ContentHash Hash = 1;
}

message DirectoryArtifact{
    AbsolutePath Path = 1;

    uint32 PartialSealID = 2;

    bool IsSharedOpaque = 3;
}

message FileOrDirectoryArtifact{
    FileArtifact FileArtifact = 1;

    DirectoryArtifact DirectoryArtifact = 2;

    bool IsFile = 3;

    bool IsDirectory = 4;
}

message Pip{
    int64 SemiStableHash = 1;

    uint32 PipId = 2;

    NodeId NodeId = 3;

    repeated Edge IncomingEdges = 4;

    repeated Edge OutgoingEdges = 5;
}

message PipProvenance{
    string Usage = 1;

    string ModuleId = 2;

    string ModuleName = 3;

    int64 SemiStableHash = 4;
}

message ProcessPip{
    Pip GraphInfo = 1;

    Options ProcessOptions = 2;

    FileArtifact StandardInputFile = 3;

    string StandardInputData = 4;

    StandardInput StandardInput = 5;

    FileArtifact ResponseFile = 6;

    string ResponseFileData = 7;

    FileArtifact Executable = 8;

    string ToolDescription = 9;

    AbsolutePath WorkingDirectory = 10;

    string Arguments = 11;

    repeated EnvironmentVariable EnvironmentVariable = 12;

    repeated FileArtifact Dependencies = 13;

    repeated DirectoryArtifact DirectoryDependencies = 14;

    repeated AbsolutePath UntrackedPaths = 15;

    repeated AbsolutePath UntrackedScopes = 16;

    repeated FileArtifactWithAttributes FileOutputs = 17;

    repeated DirectoryArtifact DirectoryOutputs = 18;

    AbsolutePath TempDirectory = 19;

    repeated AbsolutePath AdditionalTempDirectories = 20;

    ServiceInfo ServiceInfo = 21;

    repeated AbsolutePath PreserveOutputWhitelist = 22;

    // Overridden Member Variables
    repeated string Tags = 23;

    PipProvenance Provenance = 24;
}

message WriteFile{
    Pip GraphInfo = 1;

    FileArtifact Destination = 2;

    string Contents = 3;

    WriteFileEncoding Encoding = 4;

    // Overridden Member Variables
    repeated string Tags = 5;

    PipProvenance Provenance = 6;
}

message CopyFile{
    Pip GraphInfo = 1;

    FileArtifact Source = 2;

    FileArtifact Destination = 3;

    bool OutputsMustRemainWritable = 4;

    // Overridden Member Variables
    repeated string Tags = 5;

    PipProvenance Provenance = 6;
}

message SealDirectory{
    Pip GraphInfo = 1;

    SealDirectoryKind Kind = 2;

    repeated string Patterns = 3;

    repeated FileArtifact Contents = 4;

    repeated DirectoryArtifact ComposedDirectories = 5;

    bool IsComposite = 6;

    bool Scrub = 7;

    DirectoryArtifact Directory = 8;

    bool IsSealSourceDirectory = 9;

    // Overridden Member Variables
    repeated string Tags = 10;

    PipProvenance Provenance = 11;
}

message IpcPip{
    Pip GraphInfo = 1;

    IpcClientInfo IpcInfo = 2;

    string MessageBody = 3;

    repeated uint32 ServicePipDependencies = 4;

    repeated FileArtifact FileDependencies = 5;

    repeated DirectoryArtifact DirectoryDependencies = 6;

    repeated FileOrDirectoryArtifact LazilyMaterializedDependencies = 7;

    bool IsServiceFinalization = 8;

    // Overridden Member Variables
    repeated string Tags = 9;

    PipProvenance Provenance = 10;
}

message StandardInput{
    FileArtifact File = 1;

    string Data = 2;
}

message EnvironmentVariable{
    string Name = 1;

    string Value = 2;

    bool IsPassThrough = 3;
}

message FileArtifactWithAttributes{
    AbsolutePath Path = 1;

    int32 RewriteCount = 2;

    FileExistence FileExistence = 3;
}

message ServiceInfo{
    ServicePipKind Kind = 1;

    repeated uint32 ServicePipDependencies = 2;

    uint32 ShutdownPipId = 3;

    repeated uint32 FinalizationPipIds = 4;

    bool IsStartOrShutdownKind = 5;
}

message LocationData{
    int32 Line = 1;

    AbsolutePath Path = 2;

    int32 Position = 3;
}

message IpcClientInfo{
    string IpcMonikerId = 1;
}

// This is a PipGraph Node (name is kept the same as in internal code)
message NodeId{
    uint32 Value = 1;
}

// This is a PipGraph edge (name is kept the same as in internal code)
message Edge{
    // Source or target node represented by edge
    NodeId OtherNode = 1;

    bool IsLight = 2;

    uint32 Value = 3;
}

message Graph{
    int32 NodeCount = 1;

    NodeRange NodeRange = 2;

    int32 EdgeCount = 3;
}

message NodeEdgeListHeader{
    int32 FirstIndex = 1;

    int32 Count = 2;
}

message NodeRange{
    bool IsEmpty = 1;

    int32 Size = 2;

    NodeId FromInclusive = 3;

    NodeId ToInclusive = 4;
}

message ContentFingerprint{
    Fingerprint Hash = 1;
}